% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MultimediaClient.r
\docType{data}
\name{MultimediaClient}
\alias{MultimediaClient}
\title{Multimedia operations}
\format{}
\usage{
# client <- MultimediaClient$new()
}
\description{
This client connects to all Multimedia-related endpoints
of the NBA. Each endpoint is available as a class method
(see section 'Methods' below). Optionally, a custom URL
pointing to a NBA server and a user Agent can be specified
by the user (see section 'Fields' below).
}
\section{Fields}{

\describe{
\item{\code{basePath}}{Stores url path of the request, defaults to http://api.biodiversitydata.nl/v2}

\item{\code{userAgent}}{Set the user agent of the request, defaults to nbaR/0.0.1}
}}

\section{Methods}{

\describe{
\item{\code{ count }}{

  Get the number of multimedia documents matching a given condition;
  Conditions given as query parameters or QuerySpec JSON.

    Parameters:
    \itemize{
        \item \code{ query_spec } : Object of type QuerySpec or its JSON representation

        \item \code{ queryParams } : named list or vector with query parameters

        \item \code{ ... } : additional parameters passed to httr::GET
    }
    Returns:
        \code{ integer }
}
\item{\code{ count_distinct_values }}{

  Count the distinct number of values that exist for a given field;
  See also endpoint /getDistinctValues.

    Parameters:
    \itemize{

        \item \code{ field } : Name of field in taxon object


        \item \code{ ... } : additional parameters passed to httr::GET
    }
    Returns:
        \code{ integer }
}
\item{\code{ count_distinct_values_per_group }}{

  Count the distinct number of field values that exist per the given field to group by;
  See also endpoint /getDistinctValuesPerGroup.

    Parameters:
    \itemize{

        \item \code{ group } : name of field in the multimedia object you want to group by \item \code{ field } : name of field in the multimedia object


        \item \code{ ... } : additional parameters passed to httr::GET
    }
    Returns:
        \code{ list }
}
\item{\code{ download_query }}{

  Dynamic download service: Query for multimedia objects and return result as a stream ...;
  Query with query parameters or querySpec JSON. ....

    Parameters:
    \itemize{
        \item \code{ collection_type } : Example query param

        \item \code{ queryParams } : named list or vector with query parameters

        \item \code{ ... } : additional parameters passed to httr::GET
    }
    Returns:
        \code{  }
}
\item{\code{ find }}{

  Find a multimedia document by id;
  If found, returns a single multimedia document.

    Parameters:
    \itemize{

        \item \code{ id } : id of multimedia document


        \item \code{ ... } : additional parameters passed to httr::GET
    }
    Returns:
        \code{ MultiMediaObject }
}
\item{\code{ find_by_ids }}{

  Find multimedia document by ids;
  Given multiple ids, returns a list of multimedia documents.

    Parameters:
    \itemize{

        \item \code{ ids } : ids of multiple multimedia documents, separated by comma


        \item \code{ ... } : additional parameters passed to httr::GET
    }
    Returns:
        \code{ MultiMediaObject }
}
\item{\code{ get_distinct_values }}{

  Get all different values that can be found for one field;
  A list of all fields for multimedia documents can be retrieved with /metadata/getFieldInfo.

    Parameters:
    \itemize{

        \item \code{ field } : field


        \item \code{ ... } : additional parameters passed to httr::GET
    }
    Returns:
        \code{ list }
}
\item{\code{ get_distinct_values_per_group }}{

  Get all distinct values (and their document count) for the field given divided per distinct value of the field to group by;
  See also endpoint /getDistinctValues.

    Parameters:
    \itemize{

        \item \code{ group } : name of field in the multimedia object you want to group by \item \code{ field } : name of field in the multimedia object


        \item \code{ ... } : additional parameters passed to httr::GET
    }
    Returns:
        \code{ list }
}
\item{\code{ get_field_info }}{

  Returns extended information for each field of a multimedia document;
  Info consists of whether the fields is indexed, the ElasticSearch datatype and a list of allowed operators.

    Parameters:
    \itemize{




        \item \code{ ... } : additional parameters passed to httr::GET
    }
    Returns:
        \code{ list }
}
\item{\code{ get_paths }}{

  Returns the full path of all fields within a document;
  See also metadata/getFieldInfo for all allowed operators per field.

    Parameters:
    \itemize{




        \item \code{ ... } : additional parameters passed to httr::GET
    }
    Returns:
        \code{ character }
}
\item{\code{ get_setting }}{

  Get the value of an NBA setting;
  All settings can be queried with /metadata/getSettings.

    Parameters:
    \itemize{

        \item \code{ name } : name of setting


        \item \code{ ... } : additional parameters passed to httr::GET
    }
    Returns:
        \code{ list }
}
\item{\code{ get_settings }}{

  List all publicly available configuration settings for the NBA;
  The value of a specific setting can be queried with metadata/getSetting/{name}.

    Parameters:
    \itemize{




        \item \code{ ... } : additional parameters passed to httr::GET
    }
    Returns:
        \code{ list }
}
\item{\code{ is_operator_allowed }}{

  Checks if a given operator is allowed for a given field;
  See also metadata/getFieldInfo.

    Parameters:
    \itemize{

        \item \code{ field } : multimedia document field \item \code{ operator } : operator


        \item \code{ ... } : additional parameters passed to httr::GET
    }
    Returns:
        \code{ logical }
}
\item{\code{ query }}{

  Query for multimedia documents;
  Search for multimedia documents with query parameters or QuerySpec JSON string.

    Parameters:
    \itemize{
        \item \code{ query_spec } : Object of type QuerySpec or its JSON representation

        \item \code{ queryParams } : named list or vector with query parameters

        \item \code{ ... } : additional parameters passed to httr::GET
    }
    Returns:
        \code{ QueryResult }
}
}
}

\keyword{datasets}
