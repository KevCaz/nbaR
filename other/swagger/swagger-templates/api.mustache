{{>partial_header}}
#' @title {{baseName}} operations
#' @description Client class for {{importPath}} objects
#'
#' @field path Stores url path of the request.
#' @field userAgent Set the user agent of the request.
#'
#' @importFrom R6 R6Class
#'
#' @section Methods:
#' \describe{
{{#operations}}
{{#operation}}
#' \item{\code{ {{operationId}} }}{
#'
#'   {{summary}};
#'   {{notes}}.
#'
#'     Parameters:
#'     \itemize{
#'         {{#queryParams}}\item \code{ {{paramName}} } : {{description}} {{/queryParams}}
#'         \item \code{ ... } : additional parameters passed to httr::GET
#'     }
#'     Returns:
#'         \code{ {{returnType}} }
#' }
{{/operation}}
#' }
#'
#' @export
{{classname}} <- R6::R6Class(
    "{{classname}}",
    inherit = ApiClient,
    public = list(
        userAgent = "{{#httpUserAgent}}{{{.}}}{{/httpUserAgent}}{{^httpUserAgent}}Swagger-Codegen/{{{packageVersion}}}/r{{/httpUserAgent}}",
        initialize = function(basePath){
        super$initialize(basePath)
    },

    {{#operation}}
      {{operationId}} = function(
      {{#allParams}}
          {{baseName}} = NULL,
      {{/allParams}}
      {{#hasQueryParams}}
          queryParams = list(),
      {{/hasQueryParams}}
      {{#isResponseFile}}
          filename = format(Sys.time(),
                            "download-%Y-%m-%dT%H:%m.zip"),
      {{/isResponseFile}}
          ... ) {
        headerParams <- character()
      {{#hasHeaderParams}}
        {{#headerParams}}

         if (!missing(`{{paramName}}`)) {
            headerParams["{{baseName}}"] <- `{{paramName}}`

         }
          {{/headerParams}}
        {{/hasHeaderParams}}
      {{#hasQueryParams}}
        if (!is.null(querySpec) & length(queryParams) > 0) {
            stop("Either querySpec or queryParams argument allowed, not both.")
        }
          {{#queryParams}}            
            
        if (!missing(`{{baseName}}`)) {
          ## querySpec can be either JSON string or object of type QuerySpec. 
          param <- ifelse(typeof(`{{baseName}}`) == "environment",
                          `{{baseName}}`$toJSONString(),
                          `{{baseName}}`)    
          queryParams["{{baseName}}"] <- param
        }
        ## querySpec parameter has underscore in NBA, omitted in argument
        names(queryParams) <- gsub("querySpec",
                                    "_querySpec",
                                    names(queryParams))

          {{/queryParams}}
      {{/hasQueryParams}}
      {{^hasQueryParams}}
        queryParams <- list()
      {{/hasQueryParams}}
        {{#hasFormParams}}
        body <- list(
          {{#formParams}}
            {{^isFile}}
            "{{baseName}}" = {{paramName}}{{#hasMore}},{{/hasMore}}
              {{/isFile}}
              {{#isFile}}
            "{{baseName}}" = httr::upload_file({{paramName}}){{#hasMore}},{{/hasMore}}
              {{/isFile}}
          {{/formParams}}
          )

        {{/hasFormParams}}
        {{#hasBodyParam}}
          {{#bodyParams}}
        if (!missing(`{{baseName}}`)) {
            body <- `{{baseName}}`$toJSONString()
        } else {
            body <- NULL
        }

          {{/bodyParams}}
        {{/hasBodyParam}}
        urlPath <- "{{path}}"
        {{#hasPathParams}}
          {{#pathParams}}
        if (!missing(`{{baseName}}`)) {
            urlPath <- gsub(paste0("\\{", "{{baseName}}", "\\}"), `{{baseName}}`, urlPath)
        }

          {{/pathParams}}
        {{/hasPathParams}}
        response <- self$callApi(url = paste0(self$basePath, urlPath),
                                 method = "{{httpMethod}}",
                                 queryParams = queryParams,
                                 headerParams = headerParams,
                                 body = body,
                                 {{#isResponseFile}}
                                 httr::write_disk(filename),
                                 httr::progress(),  
                                 {{/isResponseFile}}
                                 ...)

        if (httr::status_code(response) < 200 ||
               httr::status_code(response) > 299) {
            self$handleError(response)
        } else {
        {{#isResponseFile}}
            message("Query result written to ", filename)
        {{/isResponseFile}}
        {{#returnType}}
            {{#isMapContainer}}
            ## API call result is a "map container" and will be parsed to list 
            result <- httr::content(response, simplifyVector = TRUE)
            {{/isMapContainer}}            
            {{^isMapContainer}}
            {{#returnTypeIsPrimitive}}
            ## API call result is "primitive type", return vector or single value
            result <- as.{{returnType}}(httr::content(response))
            {{/returnTypeIsPrimitive}}
            {{^returnTypeIsPrimitive}}
            {{#hasReference}}
            ## API call result is object of model class
            returnObject <- {{returnType}}$new()
            {{/hasReference}}
            {{#isListContainer}}
            ## API call result is "list container"
            result <- lapply(httr::content(response),
                             function(x) {
                                 returnObject$fromList(x,
                                 typeMapping = list(item = private$getBaseDataType()))
                                 })
            {{/isListContainer}}
            {{^isListContainer}}                        
            ## if API call result is QueryResult,
            ## list items must be mapped to model class            
            ##if (class(returnObject)[1] == "QueryResult") {
            ##  returnObject$docType <- private$getBaseDataType()
            ##}
            result <- returnObject$fromList(
                httr::content(response),
                  typeMapping = list(item = private$getBaseDataType()))
            {{/isListContainer}}            
            {{/returnTypeIsPrimitive}}
            {{/isMapContainer}}            
        {{/returnType}}
        {{^returnType}}        
            ## empty response, e.g. when file is downloaded
            result <- NULL
            {{/returnType}}
            Response$new(result, response)
        }        
    }{{#hasMore}},{{/hasMore}}
    {{/operation}}
  )
)
{{/operations}}
