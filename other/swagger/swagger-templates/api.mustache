{{>partial_header}}
{{#operations}}
#' @title {{baseName}} operations
#' @description {{importPath}}
#'
#' @field path Stores url path of the request.
#' @field userAgent Set the user agent of the request.
#'
#' @importFrom R6 R6Class
#'
#' @section Methods:
#' \describe{
{{#operation}}
#'
#' {{operationId}} {{summary}}
#'
{{/operation}}
#' }
#'
#' @export
{{classname}} <- R6::R6Class(
  '{{classname}}',
  inherit=ApiClient,
  public = list(
    userAgent = "{{#httpUserAgent}}{{{.}}}{{/httpUserAgent}}{{^httpUserAgent}}Swagger-Codegen/{{{packageVersion}}}/r{{/httpUserAgent}}",
    initialize = function(basePath){
      super$initialize(basePath)
    },

    {{#operation}} 
      {{#tags}}
        Has Tags
      {{/tags}}
      {{^tags}}
        Has no tags
      {{/tags}}
      # '@name {{operationId}}
      # '@title {{summary}}
      # '@description {{notes}}
      # '@return \code{ {{returnType}} }
      {{#hasQueryParams}}
      {{#queryParams}}
      # '@param {{paramName}}: {{dataType}}; {{description}}
      {{/queryParams}}
      {{/hasQueryParams}}        
      # '@param ...; additional parameters passed to httr::GET or httr::POST
      {{operationId}} = function({{#allParams}}{{paramName}}, {{/allParams}}...){
      args <- list(...)
      queryParams <- list()
      headerParams <- character()

      {{#hasHeaderParams}}
      {{#headerParams}}
      if (!missing(`{{paramName}}`)) {
        headerParams['{{baseName}}'] <- `{{paramName}}`
      }

      {{/headerParams}}
      {{/hasHeaderParams}}
      {{#hasQueryParams}}
      {{#queryParams}}
      if (!missing(`{{paramName}}`)) {
        param <- ifelse(typeof(`{{paramName}}`) == "environment", `{{paramName}}`$toJSONString(), `{{paramName}}`)    
        queryParams['{{baseName}}'] <- param
      }

      {{/queryParams}}
      {{/hasQueryParams}}
      {{#hasFormParams}}
      body <- list(
        {{#formParams}}
          {{^isFile}}
          "{{baseName}}" = {{paramName}}{{#hasMore}},{{/hasMore}}
          {{/isFile}}
          {{#isFile}}
          "{{baseName}}" = httr::upload_file({{paramName}}){{#hasMore}},{{/hasMore}}
          {{/isFile}}
        {{/formParams}}
      )

      {{/hasFormParams}}
      {{#hasBodyParam}}
      {{#bodyParams}}
      if (!missing(`{{paramName}}`)) {
        body <- `{{paramName}}`$toJSONString()
      } else {
        body <- NULL
      }

      {{/bodyParams}}
      {{/hasBodyParam}}
      urlPath <- "{{path}}"
      {{#hasPathParams}}
      {{#pathParams}}
      if (!missing(`{{paramName}}`)) {
        urlPath <- gsub(paste0("\\{", "{{baseName}}", "\\}"), `{{paramName}}`, urlPath)
      }

      {{/pathParams}}
      {{/hasPathParams}}
      resp <- self$callApi(url = paste0(self$basePath, urlPath),
                                 method = "{{httpMethod}}",
                                 queryParams = queryParams,
                                 headerParams = headerParams,
                                 body = body,
                                 ...)
      
      if (httr::status_code(resp) >= 200 && httr::status_code(resp) <= 299) {
        # response ok
        {{#returnType}}
        returnObject <- {{returnType}}$new()
        result <- returnObject$fromJSONString(httr::content(resp, "text", encoding = "UTF-8"))
        Response$new(returnObject, resp)
        {{/returnType}}
        {{^returnType}}
        # void response, no need to return anything
        {{/returnType}}
      } else  {
            self$handleError(resp)  
      }

    }{{#hasMore}},{{/hasMore}}
    {{/operation}}
  )
)
{{/operations}}

