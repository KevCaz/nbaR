{{>partial_header}}

#' @title {{baseName}} operations
#' @description Generic class for API client calls
#' @section Methods:
#' \describe{
{{#operations}}
{{#operation}}
#'
#' {{operationId}} {{summary}}
#'
{{/operation}}
{{/operations}}
#'}

#' ApiClient Class
#'
#' Generic API client for Swagger client library builds.
#' Swagger generic API client. This client handles the client-
#' server communication, and is invariant across implementations. Specifics of
#' the methods and models for each application are generated from the Swagger
#' templates.
#'
#' NOTE: This class is auto generated by the swagger code generator program.
#' Ref: https://github.com/swagger-api/swagger-codegen
#' Do not edit the class manually.
#'
#' @field basePath specifies the base URL of the API, defaults to
#'                 http://api.biodiversitydata.nl/v2
#' @field userAgent Set the user agent of the request, defaults to
#'                 {{#httpUserAgent}}{{{.}}}{{/httpUserAgent}}{{^httpUserAgent}}nbaR/{{{packageVersion}}}{{/httpUserAgent}}
#' @importFrom R6 R6Class
#' @importFrom httr add_headers user_agent GET POST
#'
#' @export
ApiClient  <- R6::R6Class(
  "ApiClient",
  public = list(
    basePath = "http://api.biodiversitydata.nl/v2",
    userAgent = "{{#httpUserAgent}}{{{.}}}{{/httpUserAgent}}{{^httpUserAgent}}nbaR/{{{packageVersion}}}{{/httpUserAgent}}",
    initialize = function(basePath, userAgent) {
        if (!missing(basePath)) {
            self$basePath <- basePath
        }
        if (!missing(userAgent)) {
            self$userAgent <- userAgent
        }
    },
    callApi = function(url, method, queryParams, headerParams, body, ...) {
        headers <- httr::add_headers(headerParams)
        ua <- httr::user_agent(self$userAgent)
        if (method == "GET") {
            httr::GET(url, query = queryParams, ua,
                      headers = headers, ...)
        }
        else if (method == "POST") {
            httr::POST(url, query = queryParams, ua,
                       headers = headers, body = body, encode='json', ...)
        }
        else {
            stop(paste("http method must be `GET` or `POST`."))
        }
    },
    handleError = function(response) {
        warningMessage <- ""
        responseMessage <- ""

        if (typeof(httr::content(response)) == "list") {
            ## handle (server) errors with stack trace etc
            c <- httr::content(response)
            warningMessage <- paste0(
                    "Status code:",
                    httr::status_code(response),
                    "\n", c$httpStatus$message,                       
                    "\nException: ", c$exception$message,
                    "\nException type: ", c$exception$type,
                    "\nFull stack trace stored in response object")
            responseMessage <- c$httpStatus$message                                     
        } else {
            ## handle errors in which httr only returns a string
            warningMessage <- httr::content(response)  
            responseMessage <- httr::content(response)  
        }
        warning(warningMessage)
        Response$new(responseMessage, response)
    }        
  ),
  private = list(
    getBaseDataType = function() {
        result <- gsub("Client", "", class(self)[1])
        result <- gsub("Multimedia", "MultiMediaObject", result)
        result <- gsub("Geo", "GeoArea", result)
        result
    }
  )
)